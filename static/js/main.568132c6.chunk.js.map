{"version":3,"sources":["redux/actions/puzzleActions.js","puzzles/testPuzzle.js","puzzles/index.js","StartingScreen.js","EndingScreen.js","App.js","serviceWorker.js","redux/store.js","redux/reducers/puzzleReducer.js","Constants.js","index.js"],"names":["ENTER_STRING","FINISH_PUZZLE","TestPuzzle","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFinish","bind","assertThisInitialized","finishPuzzle","puzzleName","react_default","a","createElement","Button","primary","onClick","Component","connect","state","puzzle","dispatch","name","type","payload","puzzleList","Puzzles","currentPuzzleIndex","transitioningPuzzleIndex","puzzleShowing","puzzleMap","testPuzzle","componentWillReceiveProps","newProps","alert","index","length","getCorrectPuzzle","StartingScreen","string","inputString","handleInputPress","handleSkipPress","action","setState","target","value","enterString","Container","style","Header","size","textAlign","Message","floated","Grid","rows","Row","Form","onSubmit","Input","inverted","placeholder","onChange","basic","EndingScreen","columns","i","push","Column","centered","Icon","color","stretched","width","getLydiaLetter","stetched","ifLydia","getLydiaComponent","getOtherComponent","Divider","getCorrectComponent","App","ifStarted","ifFinished","src_EndingScreen","puzzles","src_StartingScreen","className","correctComponent","Boolean","window","location","hostname","match","middleware","initialState","isTransitioning","applyMiddleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","arguments","undefined","objectSpread","console","error","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAAMA,EAAe,eACfC,EAAgB,oBCIhBC,cAGF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFLA,8EAOfG,KAAKJ,MAAMW,aAAaZ,EAAWa,6CAInC,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,QAASd,KAAKI,cAA9B,kBAhBSW,aAAnBpB,EACKa,WAAa,OAqBxB,IAYeQ,cAZS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAMC,SAGS,SAACC,GACxB,MAAO,CACHZ,aAAc,SAACa,GACXD,EDzBL,SAAsBC,GACzB,MAAO,CACHC,KAAM3B,EACN4B,QAASF,GCsBIb,CAAaa,OAKnBJ,CAA6CrB,GCnC/C4B,EAAa,GAEpBC,6MACFP,MAAQ,CACJQ,oBAAqB,EACrBC,0BAA2B,EAC3BC,eAAe,KAWnBC,yBACKjC,EAAWa,WAAaC,EAAAC,EAAAC,cAACkB,EAAD,0FATzB7B,KAAK8B,0BAA0B9B,KAAKJ,yDAEdmC,GAClBA,EAASb,OAAOO,qBAAuBzB,KAAKiB,MAAMS,2BAClD1B,KAAKiB,MAAMS,yBAA2BK,EAASb,OAAOO,mBACtDO,MAAM,2DAOIhC,KAAKiB,MAAMQ,mBAWVzB,KAAK4B,UAAUL,EAAWvB,KAAKJ,MAAMsB,OAAOO,qBAC3D,OAAO,yCAGP,IAAMQ,EAAQjC,KAAKiB,MAAMQ,mBACzB,OAAIQ,EAAQV,EAAWW,OACZlC,KAAK4B,UAAUL,EAAWU,IAE9B,6CAGP,IAAMA,EAAQjC,KAAKiB,MAAMQ,mBAAqB,EAC9C,OAAIQ,EAAQV,EAAWW,OACZlC,KAAK4B,UAAUL,EAAWU,IAE9B,sCAGP,OACIxB,EAAAC,EAAAC,cAAA,WACKX,KAAKmC,2BAlDApB,aA4DPC,cAJS,SAAAC,GAAK,MAAK,CAC9BC,OAAQD,EAAMC,SAGHF,CAAyBQ,yDCzDlCY,cAIF,SAAAA,EAAYxC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IACfvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMJ,KAJVqB,MAAQ,CACJoB,OAAQ,IAIRxC,EAAKyC,YAAczC,EAAKyC,YAAYjC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACnBA,EAAK0C,iBAAmB1C,EAAK0C,iBAAiBlC,KAAtBP,OAAAQ,EAAA,EAAAR,CAAAD,IACxBA,EAAK2C,gBAAkB3C,EAAK2C,gBAAgBnC,KAArBP,OAAAQ,EAAA,EAAAR,CAAAD,IAJRA,2EAMP4C,GACRzC,KAAK0C,SAAS,CAACL,OAAQI,EAAOE,OAAOC,mDAGrC5C,KAAKJ,MAAMiD,YAAY7C,KAAKiB,MAAMoB,kDAGlCrC,KAAKJ,MAAMiD,YAAY,qCAGvB,OACIpC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAWC,MAAO,IACdtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAQC,KAAK,OAAOC,UAAU,SAASH,MAAO,IAA9C,YACItC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAASF,KAAK,SAASG,SAAO,GAA9B,kIAEuC3C,EAAAC,EAAAC,cAAA,gBAFvC,IAEkDF,EAAAC,EAAAC,cAAA,qBAFlD,6EAG4CF,EAAAC,EAAAC,cAAA,+BAH5C,iGAMJF,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAMC,KAAM,EAAGJ,UAAU,UACrBzC,EAAAC,EAAAC,cAAC0C,EAAA,EAAKE,IAAN,KACI9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAMC,SAAUzD,KAAKuC,kBACjB9B,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,UAAQ,EAACC,YAAY,iBAAiBC,SAAU7D,KAAKsC,gBAGpE7B,EAAAC,EAAAC,cAAC0C,EAAA,EAAKE,IAAN,KACI9C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,QAASd,KAAKuC,kBAA9B,uBAEJ9B,EAAAC,EAAAC,cAAC0C,EAAA,EAAKE,IAAN,KACI9C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQ+C,UAAQ,EAACG,OAAK,EAAChD,QAASd,KAAKwC,iBAArC,mBAxCCzB,aA6DdC,cAZS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAMC,SAGS,SAACC,GACxB,MAAO,CACH0B,YAAa,SAACR,GACVlB,EH9DL,SAAqBkB,GACxB,MAAO,CACHhB,KAAM5B,EACN6B,QAASe,GG2DIQ,CAAYR,OAKlBrB,CAA6CoB,oBClEtD2B,2LAEE,OACItD,EAAAC,EAAAC,cAAA,wBACgBF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WADrB,0kBAQyCF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAR9C,uoBAeqDF,EAAAC,EAAAC,cAAA,iBAfrD,4BAeyFF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAf9F,2eAoBkGF,EAAAC,EAAAC,cAAA,WAC9FF,EAAAC,EAAAC,cAAA,WArBJ,wKAwBIF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAxBT,cAyBeF,EAAAC,EAAAC,cAAA,WAzBf,iCAyBkDF,EAAAC,EAAAC,cAAA,WAzBlD,6BAyBiFF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAzBtF,4IA+BJ,SAASqD,IAEL,IADA,IAAMA,EAAU,GACPC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAAQE,KAAKzD,EAAAC,EAAAC,cAAC0C,EAAA,EAAKc,OAAN,CAAaC,UAAQ,EAAClB,UAAU,aACzCzC,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAMC,MAAM,OAAOlD,KAAK,YAGhC,OAAO4C,EAEX,SAASV,IAEL,IADA,IAAMA,EAAO,GACJW,EAAI,EAAGA,EAAI,EAAGA,IACnBX,EAAKY,KAAKzD,EAAAC,EAAAC,cAAC0C,EAAA,EAAKE,IAAN,CAAUL,UAAU,OAAOkB,UAAQ,GACzC3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAMC,MAAM,OAAOlD,KAAK,YAIhC,OAAOkC,EAEX,OACI7C,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACIrC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAMkB,WAAS,EAACjB,KAAK,QAAQU,QAAQ,SACjCvD,EAAAC,EAAAC,cAAC0C,EAAA,EAAKE,IAAN,CAAUa,UAAQ,EAACG,WAAS,EAACrB,UAAU,UAClCc,KAELvD,EAAAC,EAAAC,cAAC0C,EAAA,EAAKE,IAAN,KACI9C,EAAAC,EAAAC,cAAC0C,EAAA,EAAKc,OAAN,CAAaf,QAAQ,OAAOoB,MAAO,GAC9BlB,KAEL7C,EAAAC,EAAAC,cAAC0C,EAAA,EAAKc,OAAN,CAAaI,WAAS,GAClB9D,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAASF,KAAK,QACTjD,KAAKyE,mBAGdhE,EAAAC,EAAAC,cAAC0C,EAAA,EAAKc,OAAN,CAAaf,QAAQ,QAAQoB,MAAO,GAC/BlB,MAGT7C,EAAAC,EAAAC,cAAC0C,EAAA,EAAKE,IAAN,CAAUa,UAAQ,EAACM,UAAQ,EAACxB,UAAU,UACjCc,mDAOjB,OACIvD,EAAAC,EAAAC,cAACwC,EAAA,EAAD,2EACuE1C,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAD5E,0EAOJ,OAAIX,KAAKJ,MAAMsB,OAAOyD,QACX3E,KAAK4E,oBAGL5E,KAAK6E,qDAIhB,OACIpE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACIrC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAQC,KAAK,QAAQC,UAAU,UAA/B,yCAEJzC,EAAAC,EAAAC,cAACmE,EAAA,EAAD,MACC9E,KAAK+E,8BAtGKhE,aAgHZC,cAJS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAMC,SAGHF,CAAyB+C,GC7GlCiB,qMAEE,OAAKhF,KAAKJ,MAAMsB,OAAO+D,UAGdjF,KAAKJ,MAAMsB,OAAOgE,WACfzE,EAAAC,EAAAC,cAACwE,EAAD,MAGA1E,EAAAC,EAAAC,cAACyE,EAAD,MANA3E,EAAAC,EAAAC,cAAC0E,EAAD,uCAUZ,OACI5E,EAAAC,EAAAC,cAAA,OAAK2E,UAAU,OACVtF,KAAKuF,2BAfJxE,cAyBHC,cAJS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAMC,SAGHF,CAAyBgE,GCpBpBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECZFC,oCCCEC,EAAe,CACjBnB,SAAS,EACTlD,mBAAoB,EACpBwD,WAAW,EACXC,WAAmC,IAAtB3D,EAAWW,OACxB6D,iBAAiB,GDDjBF,EAAaG,YAAgBC,KAGjC,IAAMC,EACFT,OAAOU,sCAAwCC,IAQpCC,EANDC,YAAYC,YAAgB,CAClCrF,OCHO,WAAkC,IAAjCD,EAAiCuF,UAAAtE,OAAA,QAAAuE,IAAAD,UAAA,GAAAA,UAAA,GAAzBV,EAAcrD,EAAW+D,UAAAtE,OAAA,EAAAsE,UAAA,QAAAC,EAC7C,OAAQhE,EAAOpB,MACX,IAda,eAeTJ,EAAKnB,OAAA4G,EAAA,EAAA5G,CAAA,GACEmB,EADF,CAEDgE,WAAW,EACXN,QCpBM,sBDoBIlC,EAAOnB,UAErB,MACJ,IApBc,gBAqBVL,EAAKnB,OAAA4G,EAAA,EAAA5G,CAAA,GACEmB,GAEHwB,EAAOnB,UAAYC,EAAWN,EAAMQ,qBACpCR,EAAMQ,qBACNR,EAAMiE,WAAcjE,EAAMQ,qBAAuBF,EAAWW,QAG5DyE,QAAQC,MAAM,2CAElB,MACJ,IA/BkB,oBAgCd3F,EAAKnB,OAAA4G,EAAA,EAAA5G,CAAA,GACEmB,EADF,CAED8E,iBAAiB,IAErB,MACJ,QACI9E,EAAKnB,OAAA4G,EAAA,EAAA5G,CAAA,GACEmB,GAIf,OAAOA,KD5BPiF,EAAiBL,IGXrBgB,IAASC,OACLrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUV,MAAOA,GACb5F,EAAAC,EAAAC,cAACqG,EAAD,OAEJC,SAASC,eAAe,SJoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.568132c6.chunk.js","sourcesContent":["const ENTER_STRING = \"ENTER_STRING\";\r\nconst FINISH_PUZZLE = \"FINISH_PUZZLE\";\r\n\r\nexport function enterString(string) {\r\n    return {\r\n        type: ENTER_STRING,\r\n        payload: string\r\n    };\r\n}\r\nexport function finishPuzzle(name) {\r\n    return {\r\n        type: FINISH_PUZZLE,\r\n        payload: name\r\n    };\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Button} from \"semantic-ui-react\";\r\nimport {finishPuzzle} from \"../redux/actions/puzzleActions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass TestPuzzle extends Component {\r\n    static puzzleName = \"test\";\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleFinish = this.handleFinish.bind(this);\r\n    }\r\n\r\n\r\n    handleFinish() {\r\n        this.props.finishPuzzle(TestPuzzle.puzzleName);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button primary onClick={this.handleFinish}>FINISH</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    puzzle: state.puzzle\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        finishPuzzle: (name) => {\r\n            dispatch(finishPuzzle(name));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TestPuzzle);\r\n","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport TestPuzzle from \"./testPuzzle\";\r\n\r\nexport const puzzleList = [];\r\n\r\nclass Puzzles extends Component {\r\n    state = {\r\n        currentPuzzleIndex: -1,\r\n        transitioningPuzzleIndex: -1,\r\n        puzzleShowing: false,\r\n    };\r\n    componentDidMount() {\r\n        this.componentWillReceiveProps(this.props);\r\n    }\r\n    componentWillReceiveProps(newProps) {\r\n        if (newProps.puzzle.currentPuzzleIndex !== this.state.transitioningPuzzleIndex) {\r\n            this.state.transitioningPuzzleIndex = newProps.puzzle.currentPuzzleIndex;\r\n            alert(\"transition!\");\r\n        }\r\n    }\r\n    puzzleMap = {\r\n        [TestPuzzle.puzzleName]: <TestPuzzle/>,\r\n    };\r\n    getCorrectPuzzle() {\r\n        const index = this.state.currentPuzzleIndex;\r\n        const nextIndex = index + 1;\r\n        if (index === -1) {\r\n            // No first one\r\n        }\r\n        else if (nextIndex >= puzzleList.length) {\r\n            // No next one\r\n        }\r\n        else {\r\n\r\n        }\r\n        const puzzle = this.puzzleMap[puzzleList[this.props.puzzle.currentPuzzleIndex]];\r\n        return null;\r\n    }\r\n    getPuzzle() {\r\n        const index = this.state.currentPuzzleIndex;\r\n        if (index < puzzleList.length) {\r\n            return this.puzzleMap[puzzleList[index]];\r\n        }\r\n        return null;\r\n    }\r\n    getNextPuzzle() {\r\n        const index = this.state.currentPuzzleIndex + 1;\r\n        if (index < puzzleList.length) {\r\n            return this.puzzleMap[puzzleList[index]];\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.getCorrectPuzzle()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    puzzle: state.puzzle\r\n});\r\n\r\nexport default connect(mapStateToProps)(Puzzles);\r\n\r\n","import React, {Component} from 'react';\r\nimport {Form, Header, Button, Input, Container, Card, Segment, Grid, Message} from 'semantic-ui-react';\r\nimport {connect} from \"react-redux\";\r\nimport {enterString} from \"./redux/actions/puzzleActions\";\r\n\r\n/**\r\n * This class will ask the user to input a string that the developer provides, but also have a skip button\r\n * that will allow the user to do the puzzles anyways but without the correct ending!\r\n */\r\nclass StartingScreen extends Component {\r\n    state = {\r\n        string: \"\",\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputString = this.inputString.bind(this);\r\n        this.handleInputPress = this.handleInputPress.bind(this);\r\n        this.handleSkipPress = this.handleSkipPress.bind(this);\r\n    }\r\n    inputString(action) {\r\n        this.setState({string: action.target.value});\r\n    }\r\n    handleInputPress() {\r\n        this.props.enterString(this.state.string);\r\n    }\r\n    handleSkipPress() {\r\n        this.props.enterString(\"\");\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container style={{}}>\r\n                    <Header size=\"huge\" textAlign=\"center\" style={{}}>Welcome!</Header>\r\n                        <Message size=\"medium\" floated>\r\n                                This site will run you through a series of puzzles in order to get to a secret ending! However,\r\n                                it is only meant to be seen by <b>one</b> <i>specific</i> person! So if you think you might be\r\n                                that person, ask me to tell you the <i>secret puzzle code</i> and input it down here! Otherwise,\r\n                                you can still skip and do the puzzles for your enjoyment!\r\n                        </Message>\r\n                    <Grid rows={3} textAlign=\"center\">\r\n                        <Grid.Row>\r\n                            <Form onSubmit={this.handleInputPress}>\r\n                                <Input inverted placeholder=\"secret code...\" onChange={this.inputString} />\r\n                            </Form>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                            <Button primary onClick={this.handleInputPress}>Attempt the input?</Button>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                            <Button inverted basic onClick={this.handleSkipPress}>Skip</Button>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    puzzle: state.puzzle\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        enterString: (string) => {\r\n            dispatch(enterString(string));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StartingScreen);","import React, {Component} from 'react';\r\nimport {Container, Header, Grid, Icon, Message, Divider} from 'semantic-ui-react';\r\nimport {connect} from \"react-redux\";\r\n\r\nclass EndingScreen extends Component {\r\n    getLydiaLetter() {\r\n        return (\r\n            <p>\r\n                Dear Lydia, <br/><br/>\r\n                I hope you get to read this letter after a while of trying to figure out my puzzles. You\r\n                know how much I like my games :) I just wanted to do this because I think that you don't\r\n                get enough fun mystery in your life. I think that often times it can always feel like we\r\n                are just going through life, getting confused by something, and finding out a mystery that\r\n                either is horribly boring or one that we'd rather not have found. I think that the world often\r\n                puts us into situations where we are reminded of the bleakness of reality and how dreadfully\r\n                redundant and routine it all can be. <br/><br/>\r\n                For this reason, I wanted to give you a little mystery in your life in the hopes that this lasts\r\n                longer than a day so that you really wonder what's at the end. I want this to be the surprise. I\r\n                hope this fills your heart with love and your mind full of wonder. I love you Lydia. I love you so\r\n                much. I can just imagine you reading this after frustratingly solving my puzzles and getting through\r\n                the rough patches. I hope you feel amazing when you get to the end and find just a long letter from\r\n                your boyfriend. I hope I have given you something that you will cherish and above it all I hope that\r\n                you will find that you enjoyed it along the way. <b>this</b> is my thank you to you. <br/><br/>\r\n                Anyways, now that you made it all this way, how did you like it? What was your favorite puzzle?\r\n                What did you think the surprise at the end was going to be? Are you glad that you stuck it through\r\n                without asking me for help? From a scale from 1-10, how happy did this make you? I wanted to do a\r\n                quick little experiment just to see if this is the kind of gesture you would appreciate! :) Although\r\n                it's not as much as what your smile does to me every single day, I hope it is worth something.<br/>\r\n                <br/>\r\n                In conclusion, the prize at the end is an expression of my love. I hope it isn't too sappy or weird\r\n                or anything. I hope it's just what you need to brighten your day.\r\n                <br/><br/>\r\n                Sincerely, <br/> your one and only true love, <br/> ~ Leonid Igorivich Belyi <br/><br/>\r\n                P.S You can talk to me about this now, I can't wait to hear your thoughts on it all! :))))))\r\n            </p>\r\n        )\r\n    }\r\n    getLydiaComponent() {\r\n        function columns() {\r\n            const columns = [];\r\n            for (let i = 0; i < 10; i++) {\r\n                columns.push(<Grid.Column centered textAlign=\"justified\">\r\n                    <Icon color=\"pink\" name=\"heart\"/>\r\n                </Grid.Column>);\r\n            }\r\n            return columns;\r\n        }\r\n        function rows() {\r\n            const rows = [];\r\n            for (let i = 0; i < 8; i++) {\r\n                rows.push(<Grid.Row textAlign=\"left\" centered>\r\n                    <Icon color=\"pink\" name=\"heart\"/>\r\n                </Grid.Row>);\r\n\r\n            }\r\n            return rows;\r\n        }\r\n        return (\r\n            <Container>\r\n                <Grid stretched rows='equal' columns='equal'>\r\n                    <Grid.Row centered stretched textAlign=\"center\">\r\n                        {columns()}\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column floated=\"left\" width={1}>\r\n                            {rows()}\r\n                        </Grid.Column>\r\n                        <Grid.Column stretched>\r\n                            <Message size=\"tiny\">\r\n                                {this.getLydiaLetter()}\r\n                            </Message>\r\n                        </Grid.Column>\r\n                        <Grid.Column floated=\"right\" width={1}>\r\n                            {rows()}\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row centered stetched textAlign=\"center\">\r\n                        {columns()}\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n    getOtherComponent() {\r\n        return (\r\n            <Message>\r\n                Good job completing the puzzles! I hope you had fun while doing so!<br/><br/>\r\n                ~ Leonid Igorivich Belyi\r\n            </Message>\r\n        );\r\n    }\r\n    getCorrectComponent() {\r\n        if (this.props.puzzle.ifLydia) {\r\n            return this.getLydiaComponent();\r\n        }\r\n        else {\r\n            return this.getOtherComponent();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Header size=\"small\" textAlign=\"center\">Congratulations! You beat my puzzle!</Header>\r\n                </Container>\r\n                <Divider/>\r\n                {this.getCorrectComponent()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    puzzle: state.puzzle\r\n});\r\n\r\nexport default connect(mapStateToProps)(EndingScreen);","import React, { Component } from 'react';\nimport Puzzles from \"./puzzles\";\nimport {connect} from \"react-redux\";\nimport StartingScreen from \"./StartingScreen\";\nimport EndingScreen from \"./EndingScreen\";\nimport './App.css';\n\nclass App extends Component {\n    correctComponent() {\n        if (!this.props.puzzle.ifStarted) {\n            return (<StartingScreen/>);\n        }\n        else if (this.props.puzzle.ifFinished) {\n            return (<EndingScreen/>);\n        }\n        else {\n            return (<Puzzles/>);\n        }\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                {this.correctComponent()}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    puzzle: state.puzzle,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport puzzle from \"./reducers/puzzleReducer\";\r\nimport {reduxLog} from \"../Constants\";\r\n\r\nlet middleware;\r\nif (reduxLog) {\r\n    middleware = applyMiddleware(logger, thunk);\r\n}\r\nelse {\r\n    middleware = applyMiddleware(thunk);\r\n}\r\n\r\nconst composeEnhancers =\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(combineReducers({\r\n        puzzle,\r\n    }),\r\n    composeEnhancers(middleware)\r\n);\r\n\r\nexport default store;\r\n","import {puzzleList} from \"../../puzzles\";\r\nimport {string} from \"../../Constants\";\r\n\r\nconst ENTER_STRING = \"ENTER_STRING\";\r\nconst FINISH_PUZZLE = \"FINISH_PUZZLE\";\r\nconst FINISH_TRANSITION = \"FINISH_TRANSITION\";\r\n\r\nconst initialState = {\r\n    ifLydia: false,\r\n    currentPuzzleIndex: 0,\r\n    ifStarted: false,\r\n    ifFinished: (puzzleList.length === 0),\r\n    isTransitioning: false\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ENTER_STRING:\r\n            state = {\r\n                ...state,\r\n                ifStarted: true,\r\n                ifLydia: (action.payload === string),\r\n            };\r\n            break;\r\n        case FINISH_PUZZLE:\r\n            state = {\r\n                ...state,\r\n            };\r\n            if (action.payload === puzzleList[state.currentPuzzleIndex]) {\r\n                state.currentPuzzleIndex++;\r\n                state.ifFinished = (state.currentPuzzleIndex === puzzleList.length);\r\n            }\r\n            else {\r\n                console.error(\"DIDN'T RECEIVE CORRECT PUZZLE STRING!!!\");\r\n            }\r\n            break;\r\n        case FINISH_TRANSITION:\r\n            state = {\r\n                ...state,\r\n                isTransitioning: false\r\n            };\r\n            break;\r\n        default:\r\n            state = {\r\n                ...state\r\n            };\r\n            break;\r\n    }\r\n    return state;\r\n}","export const reduxLog = false;\r\nexport const string = \"cat camel octopus\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport './semantic/dist/semantic.min.css';\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}